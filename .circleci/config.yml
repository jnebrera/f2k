version: 2

default_workspace: &default_workspace
  # Smallest circleci official image at 11/17. We don't need any tools here.
  docker:
    - image: docker

save_cache:
  - &save_cache
    save_cache:
      key: f2k-cache-{{ .Branch }}-{{ .BuildNum }}
      paths:
        - docker-cache/built-images.tgz

restore_cache:
  - &restore_cache
    restore_cache:
      keys:
        - f2k-cache-{{ .Branch }}-
        - f2k-cache-

# Save all docker images in cache
save_docker_images:
  - &save_docker_images
    # Save tags & history. If you don't save history, can't re-use docker cache
    # Keep in sync the diff with load_docker_images
    run: |
      mkdir -p docker-cache
      docker images  --filter "dangling=false" --format '{{.ID}} {{.Repository}} {{.Tag}}' > docker_images.newsum
      if ! diff docker_images.newsum docker-cache/built-images.sum; then
        mv docker_images.newsum docker-cache/built-images.sum
        docker_images=$(docker images --filter 'dangling=false' \
          --format '{{.Repository}}:{{.Tag}}')
        docker_histories=$(for i in ${docker_images}; \
          do docker history -q $i | grep -v missing; \
        done)
        docker save ${docker_images} ${docker_histories} \
          | gzip > docker-cache/built-images.tgz
      fi

load_docker_images:
  - &load_docker_images
    # Keep in sync the summary generation with save_docker_images
    run: |
      if [[ -f docker-cache/built-images.tgz ]]; then
        zcat docker-cache/built-images.tgz | docker load;
        docker images  --filter "dangling=false" --format '{{.ID}} {{.Repository}} {{.Tag}}' > docker-cache/built-images.sum
      else
        echo "NO DOCKER CACHE";
      fi

jobs:
  # Build & prepare devel container
  build_dev:
    <<: *default_workspace
    steps:
      - setup_remote_docker
      - checkout
      # Use cached f2k images if possible
      - *restore_cache
      - *load_docker_images
      # Create development environment
      - run: apk add --no-cache make m4
      - run:
          environment:
            DOCKER_BUILD_PARAMETERS: -t f2k-dev
          command: make dev-docker
      - *save_docker_images
      - *save_cache

  # (Template) execute a single command in development docker
  T_dev_run: &T_dev_run
    <<: *default_workspace
    steps:
      - setup_remote_docker
      - checkout
      - *restore_cache
      - *load_docker_images
      - run: '[[ -f workspace.tgz ]] && tar xvzpf workspace.tgz || true'
      # Launch test kafka
      - run: docker run -d --hostname kafka --name kafka spotify/kafka;
      # Launch test container
      - run: docker run -dt --link kafka --name dev-container f2k-dev;
      # Download GeoIP files
      - run: >
            apk add --no-cache make &&
            make -j tests/asn.dat tests/asnv6.dat tests/country.dat tests/countryv6.dat
      # Copy environment
      - run: docker cp . dev-container:/app;
      # Actual commands run. Exit 255 will stop iteration
      - run: |
             printf "%s\n" "${docker_cmds}" | tr '\n' '\0' | \
               xargs -I {} -0 -t -n 1 docker exec dev-container sh -c '{} || exit 255'
      # Collect results
      - run: docker cp dev-container:/app/tests/ /tmp
      - run: docker cp dev-container:/app/coverage.out.html . || mkdir -p coverage.out.html
      - store_test_results:
          path: /tmp/tests
      - store_artifacts:
          path: coverage.out.html

  # Test with assertions on
  assertions:
    <<: *T_dev_run
    environment:
      - docker_cmds: |
          ./configure --bootstrap --enable-assertions --enable-test-framework --disable-zookeeper --enable-udns
          make
          make checks

  coverage:
    <<: *T_dev_run
    environment:
      - docker_cmds: |
          ./configure --bootstrap --disable-optimization --enable-coverage --enable-test-framework --disable-zookeeper --enable-udns
          make
          make checks
          make coverage coverage-html

  release:
    <<: *T_dev_run
    environment:
      - docker_cmds: |
          ./configure --bootstrap --enable-test-framework --disable-zookeeper --enable-udns
          make
          make checks

workflows:
  version: 2
  binary:
    jobs:
      # Base docker for build and tests application
      - build_dev

      - assertions:
          requires:
            - build_dev
      - release:
          requires:
            - build_dev
      - coverage:
          requires:
            - build_dev
