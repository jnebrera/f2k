#!/bin/bash
#

mkl_require good_cflags
mkl_require atomics must pass
mkl_require socket
mkl_require gitversion as GITVERSION

mkl_mkvar_append CPPFLAGS CPPFLAGS "-D_GNU_SOURCE -DFORTIFY_SOURCE=2"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-DNDEBUG"
#mkl_mkvar_append CPPFLAGS CPPFLAGS "-ftrack-macro-expansion=2 -Wsign-conversion"
#mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wjump-misses-init" # New in gcc 4.5
#mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wdouble-promotion" # New in gcc 4.6
#mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wunused-local-typedefs" # New in gcc 4.7
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wcast-align -Wdisabled-optimization"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Winit-self -Wlogical-op"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wmissing-include-dirs -Wstrict-overflow=5"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wundef -Wswitch-default"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wmissing-declarations"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wdisabled-optimization -Wshadow"
mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wcast-qual -Wunused -Wextra"

mkl_toggle_option "Standard" WITH_LIBRDKAFKA        "--enable-librdkafka"          "librdkafka: For kafka export" "y"
mkl_toggle_option "Standard" WITH_GEOIP             "--enable-geoip"               "MaxMind (r) GeoIP library" "y"
mkl_toggle_option "Standard" WITH_SFLOW             "--enable-sflow"               "S-FLOW Support" "n"
mkl_toggle_option "Standard" WITH_ZOOKEEPER         "--enable-zookeeper"           "Apache Zookeeper support" "y"
mkl_toggle_option "Standard" WITH_UDNS              "--enable-udns"                "Michael Tokarev reverse-DNS support" "y"
mkl_toggle_option "Feature"  WITH_INTEGRATION_TESTS "--enable-integration-tests"   "Run integration tests" "n"
mkl_toggle_option "Feature"  WITH_PRINT_BOUND_CHECKS "--enable-export-bounds-chks" "Checks bound in export functions (SLOW!)" "n"
mkl_toggle_option "Feature"  WITH_COVERAGE           "--enable-coverage"           "Coverage build" "n"
mkl_toggle_option "Feature"  WITH_CMOCKA             "--enable-cmocka"             "Cmocka test framework" "n"

LIBRD_COMMIT=bb4ec7e65c8d3d411837e506e8d02f293b9a0a20
function bootstrap_librd {
  if [[ -d "librd" ]]; then
    # Already bootstrapped
    return 0
  fi

  mv "librd-${LIBRD_COMMIT}" librd
  cd librd
  make
}

function checks_librd {
  mkl_meta_set "librd" "desc" "Magnus Edenhill lib for rapid development"
  mkl_meta_set "librd" "bootstrap_url" "https://github.com/eugpermar/librd/archive/${LIBRD_COMMIT}.zip"
  mkl_meta_set "librd" "bootstrap_cppflags" "-I./vendor/librd"
  mkl_meta_set "librd" "bootstrap_static_lib" "vendor/librd/librd/librd.a"
  mkl_meta_set "librd" "bootstrap_makefn" "bootstrap_librd"

  mkl_lib_check --static=-lrd "librd" "" fail CC "-lrd -lpthread -lz -lrt" \
       "#include <librd/rd.h>"
}

function bootstrap_cmocka {
  if [[ ! -d cmocka ]]; then
    mv cmocka-1.1.1 cmocka
  fi

  mkdir -p cmocka/build

  if [[ ! -f "cmocka/build/Makefile" ]]; then
    (cd cmocka/build; cmake -DWITH_STATIC_LIB=yes ..)
  fi

  if [[ ! -f "cmocka/build/src/libcmocka.a" ]]; then
    (cd cmocka/build; make)
  fi
}

function checks_cmocka {
  mkl_meta_set "cmocka" "desc" "Elegant unit testing framework for C with support for mock objects"
  mkl_meta_set "cmocka" "bootstrap_url" "https://cmocka.org/files/1.1/cmocka-1.1.1.tar.xz"
  mkl_meta_set "cmocka" "bootstrap_cppflags" "-I./vendor/cmocka/cmocka/include/"
  mkl_meta_set "cmocka" "bootstrap_static_lib" "vendor/cmocka/cmocka/build/src/libcmocka.a"
  mkl_meta_set "cmocka" "bootstrap_makefn" "bootstrap_cmocka"

  mkl_lib_check --static=-lcmocka "cmocka" "" fail CC "-lcmocka" \
       "#include <stddef.h>
        #include <setjmp.h>
        #include <stdarg.h>
        #include <cmocka.h>"
}

function checks_librdkafka {
    # Check that librdkafka is available, and allow to link it statically.
    mkl_meta_set "librdkafka" "desc" "librdkafka is available at http://github.com/edenhill/librdkafka."
    mkl_meta_set "librdkafka" "deb" "librdkafka-dev"
    mkl_lib_check --static=-lrdkafka "librdkafka" "" fail CC "-lrdkafka -lpthread -lz" \
       "#include <librdkafka/rdkafka.h>"
}

function checks_no_missing_initializers {
  # GCC<4.7 throws this warning if with >1 members are initialized = {0}
  # TODO check with clang
  MAJOR=$(echo __GNUC__ | ${CC} -E -x c - | tail -n 1)
  MINOR=$(echo __GNUC_MINOR__ | ${CC} -E -x c - | tail -n 1)
  if [ $MAJOR -le 5 ] || ([ $MAJOR -eq 5 ] && [ $MINOR -lt 1 ]); then
    mkl_mkvar_append CPPFLAGS CPPFLAGS "-Wno-missing-field-initializers"
  fi
}

function checks {
    mkl_define_set "OS name" "osName" "`uname`"
    checks_no_missing_initializers

    checks_librd

    if [ "x$WITH_CMOCKA" == "xy" ]; then
      checks_cmocka
    fi

    mkl_lib_check "pcap" "" fail CC "-lpcap"

    # -lrd required
    if [ "x$WITH_LIBRDKAFKA" == "xy" ]; then
        checks_librdkafka
        mkl_define_set "Magnus Edenhill librdkafka" "HAVE_LIBRDKAFKA" "1"
    fi

    if [ "x$WITH_GEOIP" == "xy" ]; then
        mkl_lib_check "geoip" HAVE_GEOIP fail CC "-lGeoIP" \
            "#include <GeoIP.h>
             void *f();void *f(){return GeoIP_org_by_ipnum;}
             void *g();void *g(){return GeoIP_org_by_ipnum_v6;}"
        mkl_define_set "GeoIP V6 Support" "HAVE_GEOIP_IPv6" "1"
    fi

    if [ "x$WITH_ZOOKEEPER" == "xy" ]; then
        mkl_lib_check "zookeeper" HAVE_ZOOKEEPER fail CC "-lzookeeper_mt" \
            "#include <zookeeper/zookeeper.h>"
        mkl_define_set "Zookeeper Support" "HAVE_ZOOKEEPER" "1"
    fi


    if [ "x$WITH_SFLOW" == "xy" ]; then
        mkl_err "Sflow support is in a experimental phase"
    fi

    if [ "x$WITH_UDNS" == "xy" ]; then
        mkl_lib_check "udns" HAVE_UDNS fail CC "-ludns" \
            "#include <udns.h>
            void *f();void *f(){return dns_init;}"
    fi

    if [[ "x$WITH_INTEGRATION_TESTS" == "xy" ]]; then
      mkl_define_set "" "TESTS_ZK_HOST" "172.26.0.2:2181"
    fi

    mkl_lib_check HAVE_JSON HAVE_JSON fail CC "-ljansson" "#include <jansson.h>"

    mkl_compile_check optreset "HAVE_OPTRESET" disable CC "" "optreset = 1;"

    mkl_lib_check pthread HAVE_LIBPTHREAD fail CC "-lpthread" \
        "#include <pthread.h>
         void *f();void *f(){return pthread_mutex_init;}"

    mkl_compile_check pthread_setaffinity_np HAVE_PTHREAD_SET_AFFINITY disable CC "-lpthread" \
        "#include <pthread.h>
         void *f(){return pthread_setaffinity_np;}"

    mkl_compile_check sin6_len HAVE_SIN6_LEN disable CC "" \
        "#include <sys/socket.h>
         #include <netinet/in.h>
         #include <netinet/ip6.h>
         int f(){struct sockaddr_in6 addr;addr.sin6_len = sizeof(struct sockaddr_in6);}"

    mkl_lib_check "netfilter" HAVE_NETFILTER disable CC "-lnetfilter_queue" \
        "#include <netinet/in.h>
         #include <libnetfilter_queue/libnetfilter_queue.h>"

    mkl_compile_check sctp HAVE_SCTP disable CC "" \
        "#include <netinet/in.h>
         #include <netinet/sctp.h>
         #include <sys/socket.h>"

    mkl_compile_check pcap_next_ex HAVE_PCAP_NEXT_EX disable CC "-lpcap" \
        "#include <pcap/pcap.h>
         void *f();void *f(){return pcap_next_ex;}"

    mkl_lib_check pf_ring HAVE_PF_RING disable CC "-lpfring" \
        "#include <pfring.h>
         void *f();void *f(){return pfring_open;}"

    if [[ "x$WITHOUT_OPTIMIZATION" != "xy" || "x$WITH_COVERAGE" != "xy" ]]; then
      mkl_mkvar_append CPPFLAGS CPPFLAGS "-DNDEBUG"
    fi

    if [[ "x$WITH_COVERAGE" != "xn" ]]; then
      mkl_mkvar_append CPPFLAGS CPPFLAGS "--coverage"
      mkl_mkvar_append LDFLAGS LDFLAGS "--coverage"
    fi
}
